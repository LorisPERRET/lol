kind: pipeline
type: docker
name: CI_LOL

trigger :
    event:
        - push

steps:
    - name: build
      image: mcr.microsoft.com/dotnet/sdk:6.0
      commands:
        - cd Sources
        - dotnet restore LeagueOfLegends.sln
        - dotnet build LeagueOfLegends.sln -c Release --no-restore
        - dotnet publish LeagueOfLegends.sln -c Release --no-restore -o CI_PROJECT_DIR/build/release

    - name: tests
      image: mcr.microsoft.com/dotnet/sdk:6.0
      commands:
        - cd Sources
        - dotnet restore LeagueOfLegends.sln
        - dotnet test LeagueOfLegends.sln --no-restore
      depends_on: [build]

    - name: code-analysis
      image: hub.codefirst.iut.uca.fr/thomas.bellembois/codefirst-dronesonarplugin-dotnet6
      commands:
        - cd Sources/
        - dotnet restore LeagueOfLegends.sln
        - dotnet sonarscanner begin /k:LolProject /d:sonar.host.url=$${PLUGIN_SONAR_HOST} /d:sonar.coverageReportPaths="coveragereport/SonarQube.xml" /d:sonar.coverage.exclusions="Tests/**" /d:sonar.login=$${PLUGIN_SONAR_TOKEN} 
        - dotnet build LeagueOfLegends.sln -c Release --no-restore
        - dotnet test LeagueOfLegends.sln --logger trx --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --collect "XPlat Code Coverage"
        - reportgenerator -reports:"**/coverage.cobertura.xml" -reporttypes:SonarQube -targetdir:"coveragereport"
        - dotnet publish LeagueOfLegends.sln -c Release --no-restore -o CI_PROJECT_DIR/build/release
        - dotnet sonarscanner end /d:sonar.login=$${PLUGIN_SONAR_TOKEN}
      secrets: [ SECRET_SONAR_LOGIN ]
      settings:
        sonar_host: https://codefirst.iut.uca.fr/sonar/
        sonar_token:
          from_secret: SECRET_SONAR_LOGIN
      depends_on: [tests]
    
    - name: docker-build-and-push-image
      image: plugins/docker
      settings:
        dockerfile: Sources/Dockerfile
        context: Sources/
        registry: hub.codefirst.iut.uca.fr
        repo: hub.codefirst.iut.uca.fr/hugo.livet/lol
        username:
          from_secret: SECRET_REGISTRY_USERNAME
        password:
          from_secret: SECRET_REGISTRY_PASSWORD
      depends_on: [tests]

    - name: deploy-container-API
      image: hub.codefirst.iut.uca.fr/thomas.bellembois/codefirst-dockerproxy-clientdrone:latest
      environment:
          IMAGENAME: hub.codefirst.iut.uca.fr/hugo.livet/lol:latest
          CONTAINERNAME: LolAPI
          COMMAND: create
          OVERWRITE: true
      depends_on: [docker-build-and-push-image]

